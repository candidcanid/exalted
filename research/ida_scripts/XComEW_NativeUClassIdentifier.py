# cmd for idapython console: 
#  exec(open(".../XComEW_NativeUClassIdentifier.py").read())

import logging

import idc
import idaapi
import idautils
import ida_lines
import ida_hexrays
import ida_xref

from re import search, finditer, DOTALL, MULTILINE, sub

## NOTE - constructor_func_ea_set is hardcoded, but can be found by also using this snippet
"""
assert(idc.get_func_name(UClass__UClass) == "mb_UClass::UClass")

# used to find 'constructor' function
constructor_funcs = set()

call_refs = [addr for addr in idautils.CodeRefsTo(UClass__UClass, 0)]
for func_ea in idautils.Functions():
    func = idaapi.get_func(func_ea)
    print(dir(func))

    for cref_ea in call_refs:
        if func.start_ea <= cref_ea and cref_ea <= func.end_ea:
            constructor_funcs.add(func_ea)

for cons_ea in constructor_funcs:
    print(f"cfunc: {cons_ea:x}")

    func = idaapi.get_func(addr)
    dism_addr = list(idautils.FuncItems(func))[0]
    print(f"0x{addr:x}, {idc.generate_disasm_line(addr, 0)}, {dism_addr:x}")
"""
constructor_func_ea_set = set([
    0xf8a000,
    0x802010,
    0x544020,
    0xf04020,
    0x9da030,
    0xaa8030,
    0xb24030,
    0xd86030,
    0xf0e030,
    0x6a2040,
    0xcd0040,
    0xc72040,
    0xe92040,
    0x456050,
    0x600050,
    0x666050,
    0x8ea050,
    0xb26060,
    0x406070,
    0x686070,
    0x7da070,
    0x986070,
    0x105e070,
    0x568090,
    0x5bc090,
    0x6fe090,
    0x996090,
    0x9de090,
    0xc66090,
    0x5dc0a0,
    0x7400a0,
    0x9780a0,
    0x10080a0,
    0x5da0b0,
    0xfbc0b0,
    0x5360c0,
    0x7820c0,
    0xad80c0,
    0xc960c0,
    0xd3e0c0,
    0xa300d0,
    0x4f80e0,
    0xa5e0e0,
    0xe1c0e0,
    0x5e00f0,
    0x8860f0,
    0xc8a0f0,
    0xf540f0,
    0x518100,
    0x846100,
    0x8e6100,
    0x8f8100,
    0x43a110,
    0x718110,
    0xa8a110,
    0xe7e110,
    0xbbc120,
    0x82e130,
    0xd74130,
    0x742140,
    0x7d4140,
    0x496150,
    0x488150,
    0x502150,
    0x5e2150,
    0x6f6150,
    0x9ce150,
    0xf04150,
    0xb80160,
    0x8ac170,
    0xb06170,
    0x8ba180,
    0xa66180,
    0x52a190,
    0x59c190,
    0x6a2190,
    0x6a6190,
    0x9c8190,
    0xb48190,
    0xdfa190,
    0x5281a0,
    0xc501b0,
    0x7021b0,
    0x8ee1b0,
    0xa8a1b0,
    0xe8e1b0,
    0xfcc1b0,
    0x5041c0,
    0x8581c0,
    0x9f81c0,
    0xb2a1c0,
    0xb7c1c0,
    0xe661c0,
    0x5881d0,
    0xc561d0,
    0xd9a1d0,
    0xa101e0,
    0xa061e0,
    0xb401e0,
    0xc5c1f0,
    0x5fe1f0,
    0x4ce1f0,
    0x65c1f0,
    0x9ee1f0,
    0x52c200,
    0x5c6200,
    0xf5e200,
    0x8a4210,
    0xb7a210,
    0xf64210,
    0x472220,
    0x67c220,
    0x8f2220,
    0xd8c220,
    0x678230,
    0xd32230,
    0xd5c230,
    0x6fc240,
    0xc0c240,
    0xcce240,
    0x518250,
    0xa2e250,
    0xd04250,
    0xd6e250,
    0xfc2250,
    0x788260,
    0x7a4260,
    0x560270,
    0x79e270,
    0xb46270,
    0xdb0270,
    0x88e280,
    0x8ae280,
    0x8c0280,
    0xdb6280,
    0xf32280,
    0xb6a290,
    0xc1e290,
    0xcfa290,
    0xaca2b0,
    0x4fa2b0,
    0x6042b0,
    0x6de2b0,
    0xcc22b0,
    0x4ec2c0,
    0x67c2c0,
    0xa602c0,
    0xc5c2c0,
    0x6f22d0,
    0x73e2d0,
    0x91c2d0,
    0xff82d0,
    0x80a2e0,
    0x56e2f0,
    0x7dc2f0,
    0x8622f0,
    0xb922f0,
    0xe382f0,
    0x43e300,
    0x8fa300,
    0xa74300,
    0xede300,
    0xcae310,
    0x664320,
    0x86c320,
    0x8c0320,
    0xfba320,
    0x103a320,
    0x7da330,
    0x914330,
    0xcfa330,
    0x41e340,
    0x592340,
    0x728340,
    0xf2c340,
    0xc6c350,
    0xd0c350,
    0xf8a350,
    0x1042350,
    0x41a360,
    0x1044360,
    0x590370,
    0x5c8370,
    0x804370,
    0x946370,
    0x9f8370,
    0x6c2380,
    0x81e380,
    0x8ee380,
    0xb56390,
    0x5043a0,
    0x7043a0,
    0x8823a0,
    0x8ac3a0,
    0x8843b0,
    0xdbe3b0,
    0xea03b0,
    0xf663b0,
    0x100a3b0,
    0x9ac3c0,
    0x6a63c0,
    0x75e3c0,
    0x7743c0,
    0x7de3c0,
    0xd483c0,
    0x8fa3d0,
    0xf923d0,
    0x76c3e0,
    0xac63e0,
    0xe1a3e0,
    0xace3f0,
    0xafe3f0,
    0x77e3f0,
    0x7bc3f0,
    0x9643f0,
    0x4b4400,
    0xcba400,
    0xafc410,
    0x56c410,
    0x608410,
    0x652410,
    0x856410,
    0x99a420,
    0x9b0420,
    0xba4420,
    0xd32420,
    0xd7e420,
    0x100e430,
    0xd6afc0,
    0xc56440,
    0x852440,
    0xe52440,
    0x5f2450,
    0x674450,
    0xa92450,
    0xe8c450,
    0xcb8470,
    0x760470,
    0x7b8470,
    0x88a470,
    0x892470,
    0xda4470,
    0xad4480,
    0xd08480,
    0xe0a480,
    0xe1a480,
    0x82a490,
    0x834490,
    0x97a490,
    0xc8e4a0,
    0xf084a0,
    0xaee4b0,
    0xea04b0,
    0xfcc4b0,
    0xfea4b0,
    0x8c04c0,
    0xb9e4c0,
    0xbe84c0,
    0xd7e4c0,
    0xb384e0,
    0xd844e0,
    0x9f64f0,
    0xbbe4f0,
    0x101e4f0,
    0xb02500,
    0xd3e500,
    0xaa2510,
    0xc56510,
    0x59c520,
    0xc92520,
    0x830530,
    0xf04540,
    0x103e540,
    0x7e4550,
    0x982550,
    0xe8a550,
    0xf34550,
    0xf7e550,
    0x6c0570,
    0x740570,
    0x78a570,
    0x806570,
    0x64a580,
    0xcfc580,
    0xe70580,
    0xcec590,
    0xd28590,
    0xd70590,
    0x7485a0,
    0xa585a0,
    0xc565b0,
    0xf745b0,
    0xbcc5c0,
    0x4245c0,
    0x7145c0,
    0x8965c0,
    0x59a5d0,
    0xa125d0,
    0x5205e0,
    0xce25e0,
    0xae2600,
    0xc1c600,
    0x1038600,
    0x8f6610,
    0xcf4610,
    0xeee610,
    0x6de620,
    0x524630,
    0xa4c630,
    0xb02630,
    0xe84630,
    0xf86630,
    0xfd2630,
    0x578640,
    0xa0c640,
    0xd58640,
    0xf5a640,
    0x44a650,
    0xa96660,
    0xc96660,
    0xa8a660,
    0x464660,
    0x412660,
    0x43c660,
    0x548660,
    0x550660,
    0x63a660,
    0xe42660,
    0x7f0670,
    0x8f2670,
    0x4fc670,
    0x50c670,
    0x6ce670,
    0x764670,
    0x7ce670,
    0x596680,
    0xa9a680,
    0xcc8690,
    0x868690,
    0x8b4690,
    0xe92690,
    0x4326a0,
    0x5586a0,
    0x9306a0,
    0xb1e6b0,
    0xb6a6b0,
    0x9626b0,
    0x96a6b0,
    0x9e46b0,
    0xad46b0,
    0xdb46b0,
    0xbc86c0,
    0x4b66c0,
    0x7c46c0,
    0x8cc6c0,
    0xdc06e0,
    0xe0a6e0,
    0xb186f0,
    0xcf8700,
    0x59a710,
    0x7f0710,
    0xcbc710,
    0xcc4710,
    0xef8710,
    0xf06710,
    0x57c720,
    0x61e720,
    0x754720,
    0xf0a720,
    0xfea720,
    0x816730,
    0x924740,
    0xfa4760,
    0xc70770,
    0x4bc770,
    0x80a770,
    0x936780,
    0x6ac790,
    0x7a87a0,
    0x8f87a0,
    0x6707b0,
    0x8067b0,
    0xc667b0,
    0xfc07b0,
    0xa2a7c0,
    0xd247c0,
    0xf967c0,
    0xc407d0,
    0xca47d0,
    0xd287d0,
    0x8667e0,
    0x93e7e0,
    0xfc47e0,
    0xcc07f0,
    0xcc87f0,
    0x5867f0,
    0x5347f0,
    0xa507f0,
    0x4ce800,
    0xda4800,
    0xe80800,
    0xf84800,
    0x97c810,
    0x1052810,
    0x6a4820,
    0xa1e820,
    0xb80820,
    0xbd0820,
    0xd4c820,
    0x460830,
    0x684830,
    0xae0830,
    0xfe6830,
    0x6cc840,
    0x4e8850,
    0x51c850,
    0x7ca850,
    0x7d6850,
    0x850850,
    0xab8850,
    0x41a860,
    0x6a8860,
    0xb6a870,
    0x478880,
    0x482880,
    0xb1c880,
    0xc8c880,
    0xcca890,
    0x43a890,
    0x734890,
    0xfec890,
    0xcda8a0,
    0x52a8a0,
    0x8c48a0,
    0x10028a0,
    0x8488b0,
    0x91a8b0,
    0x9a48b0,
    0x10008b0,
    0x63a8c0,
    0x93a8c0,
    0xa1e8c0,
    0xabe8c0,
    0xd3e8c0,
    0x4088d0,
    0x61a8d0,
    0x5b88f0,
    0x7488f0,
    0xa988f0,
    0xc188f0,
    0xbec8f0,
    0xdbe8f0,
    0x54a900,
    0x958900,
    0xd28900,
    0xd2a900,
    0x4b0910,
    0x6f6910,
    0xd0e910,
    0x590920,
    0x402940,
    0xcf0940,
    0xf1e940,
    0x672950,
    0x8b2950,
    0xa72950,
    0xc32950,
    0x440960,
    0x8cc960,
    0x908960,
    0xa10960,
    0xed2960,
    0x53c970,
    0x68a970,
    0x7b6970,
    0xb12970,
    0xcde980,
    0xe4a980,
    0xe60980,
    0xfe0980,
    0x504990,
    0x748990,
    0xbb6990,
    0xc5e990,
    0xfb0990,
    0x62c9a0,
    0x64e9a0,
    0x81e9a0,
    0x90e9a0,
    0xa649a0,
    0x4d69b0,
    0x5549b0,
    0x6809b0,
    0x9909b0,
    0xa3a9b0,
    0xe9e9b0,
    0xfbe9b0,
    0xbb09c0,
    0x7c89c0,
    0xbb49c0,
    0xb9c9c0,
    0xdb09c0,
    0xe789c0,
    0xf9e9c0,
    0xeb09d0,
    0xf349d0,
    0xf729d0,
    0x4429e0,
    0x4249e0,
    0x6ee9e0,
    0x9bc9e0,
    0xd729e0,
    0x5b49f0,
    0x6569f0,
    0x8289f0,
    0x99a9f0,
    0xb709f0,
    0xc609f0,
    0xc6a9f0,
    0x590a00,
    0x796a00,
    0x8dea00,
    0xeb2a00,
    0x61ea10,
    0x78ca10,
    0x854a10,
    0x9cca10,
    0x50ca20,
    0x84ca20,
    0xaf2a20,
    0xcf6a20,
    0xcbaa30,
    0x778a30,
    0x8eaa30,
    0x976a30,
    0xa06a40,
    0x456a50,
    0x5caa50,
    0xe9ea50,
    0xef6a50,
    0xfa6a50,
    0x8f6a60,
    0xb4ca60,
    0xaeca70,
    0xceaa70,
    0xfb2a70,
    0x452a90,
    0x610a90,
    0x948a90,
    0x954a90,
    0xccea90,
    0xfaea90,
    0x81eaa0,
    0xcfaaa0,
    0xb46ab0,
    0x900ab0,
    0x5b4ad0,
    0x1002ad0,
    0xf90ae0,
    0x1012ae0,
    0x41caf0,
    0x66caf0,
    0x9c8af0,
    0xc18af0,
    0xdc8af0,
    0x8f8b00,
    0xd8ab00,
    0xf52b00,
    0x92eb20,
    0x9c2b20,
    0xbceb20,
    0x700b30,
    0x732b30,
    0xd08b30,
    0xfa4b30,
    0x40ab40,
    0x504b40,
    0x708b40,
    0x81eb40,
    0xaaab40,
    0xc66b40,
    0xb08b40,
    0x662b50,
    0x99ab50,
    0xd80b50,
    0xf24b50,
    0xf9cb50,
    0x51cb60,
    0x5beb60,
    0x9a4b60,
    0xadab60,
    0xb06b60,
    0xd9eb60,
    0x686b70,
    0x7fab70,
    0x83cb70,
    0xf32b70,
    0xf8cb70,
    0xf92b70,
    0x9fcb80,
    0xefeb80,
    0xfbcb80,
    0x6a0b90,
    0xd0ab90,
    0xf36b90,
    0xbc2ba0,
    0x402ba0,
    0xeb2ba0,
    0x476bb0,
    0x58ebb0,
    0x8a8bb0,
    0xc90bb0,
    0xe8abb0,
    0x92ebc0,
    0x462bc0,
    0x6cebc0,
    0x6eabc0,
    0xba4bc0,
    0xe32bc0,
    0xeaabc0,
    0xca8bd0,
    0x47abe0,
    0x5cebe0,
    0xd6cbe0,
    0x99abf0,
    0x4b6bf0,
    0x866bf0,
    0x86cbf0,
    0xed0bf0,
    0xfc0bf0,
    0x51cc00,
    0x526c00,
    0xd0ec00,
    0x464c10,
    0x1002c10,
    0x5a0c20,
    0xceec20,
    0x898c30,
    0xa50c30,
    0xec2c30,
    0x696c40,
    0xa0cc40,
    0xe0ec40,
    0xb46c60,
    0xd78c60,
    0x970c70,
    0xa02c70,
    0xd28c70,
    0x44ec80,
    0x704c80,
    0xa80c80,
    0xca8c80,
    0x612c88,
    0x57ac90,
    0xb3ec90,
    0xcd0c90,
    0x8e4ca0,
    0x99cca0,
    0xcceca0,
    0xdfeca0,
    0x102cca0,
    0x6f8cb0,
    0xd9acb0,
    0xa62cc0,
    0x7c0ce0,
    0x5b4cf0,
    0x8d2cf0,
    0xd94cf0,
    0x618d00,
    0xa40d00,
    0xabcd00,
    0xac2d00,
    0x5d2d10,
    0x5a2d10,
    0xe3ed10,
    0x4e2d20,
    0x878d30,
    0xbcad30,
    0x5fcfc0,
    0x49ed40,
    0x988d40,
    0xf84d40,
    0xc12d50,
    0x504d50,
    0x6ccd50,
    0xd14d50,
    0x54ed60,
    0x8e0d70,
    0x6f2d70,
    0x1024d70,
    0x806d80,
    0xb7ad80,
    0x786d90,
    0xd66da0,
    0x104ada0,
    0xe0cdb0,
    0x6f8dc0,
    0x82edc0,
    0xd3cdc0,
    0xd48dd0,
    0xf26dd0,
    0x792de0,
    0xca4df0,
    0x4badf0,
    0xdb2df0,
    0x44ee00,
    0x83ee00,
    0xcf4e10,
    0xf2ce10,
    0x52ae20,
    0x59ae20,
    0x970e20,
    0xabee20,
    0xf82e20,
    0x50ee30,
    0xdfae30,
    0xd3efc0,
    0x634e40,
    0x674e40,
    0x6d4e40,
    0x9fee40,
    0x650e50,
    0x4cae50,
    0xe24e50,
    0x4b6e60,
    0x80ae60,
    0x99ee60,
    0xe94e60,
    0xed6e60,
    0x9a6e70,
    0x478e70,
    0x56ce70,
    0x7aae70,
    0xe48e70,
    0x96ae80,
    0x9dae80,
    0xb20e90,
    0x6f0e90,
    0x78ce90,
    0x926e90,
    0xdc4ea0,
    0xfaeea0,
    0xba4ec0,
    0x4daec0,
    0x7dcec0,
    0xa5cec0,
    0x532ed0,
    0x70ced0,
    0x1084ed0,
    0x6eaef0,
    0xd36ef0,
    0x4ccf00,
    0x71af00,
    0xb26f00,
    0xd76f10,
    0xa26f20,
    0xda2f20,
    0xb5cf30,
    0xbd2f30,
    0x45af40,
    0xa2ef40,
    0xdccf40,
    0xffaf40,
    0xb98f50,
    0x9a0f50,
    0xb80f50,
    0x93ef50,
    0x430f60,
    0x4f8f60,
    0xba4f60,
    0x580f70,
    0x65cf70,
    0x948f80,
    0x96af80,
    0x8ccf80,
    0xbf0f80,
    0x4eef80,
    0x7ecf80,
    0xf00f80,
    0xf9af80,
    0xa60f90,
    0x4f0f90,
    0xa3cf90,
    0xa32fc0,
    0x916fc0,
    0x936fc0,
    0xca8fc0,
    0xb68fc0,
    0xc6afc0,
    0xce0fc0,
    0x47cfc0,
    0x4aafc0,
    0x50afc0,
    0x5bcfd0,
    0xca4fe0,
    0x476fe0,
    0x440fe0,
    0xba2fe0,
    0xeacfe0,
    0x5f0ff0,
    0x992ff0,
    0xe24ff0,
    0x6db000,
    0xec3000,
    0xef3000,
    0x43f010,
    0x513010,
    0x80b010,
    0x9a7010,
    0x62b020,
    0x8a7020,
    0xcdd020,
    0x807030,
    0xd0d030,
    0x9bb040,
    0xb09040,
    0xd1b040,
    0xd95040,
    0x465060,
    0xd6b060,
    0xf9b060,
    0x4af070,
    0x7c5070,
    0xcf1070,
    0x7b7080,
    0x9e5080,
    0xa33080,
    0xd3b080,
    0xf1d080,
    0x41d090,
    0xaff090,
    0x4f10a0,
    0x7ad0a0,
    0xf5f0a0,
    0xa270b0,
    0xa870b0,
    0xb830b0,
    0x9670c0,
    0x4010d0,
    0x6cd0d0,
    0x72b0d0,
    0xa530d0,
    0xc7d0d0,
    0x46b0e0,
    0xf510e0,
    0x54b0f0,
    0xae7100,
    0x64f100,
    0x4a9100,
    0xb73100,
    0x1037100,
    0x5c9110,
    0x493120,
    0xe93120,
    0xecb120,
    0xfaf120,
    0x1051120,
    0x7f5130,
    0x4cd140,
    0x821140,
    0xa03140,
    0xa1d140,
    0x62b150,
    0xce1150,
    0x1023150,
    0x53f160,
    0x841160,
    0xa59160,
    0xd6b160,
    0xe77160,
    0xe15170,
    0xf53170,
    0x719180,
    0xa6f180,
    0xaeb180,
    0xd29180,
    0xd73180,
    0xf51180,
    0x5831a0,
    0xf351a0,
    0xc111b0,
    0x8931b0,
    0x89b1b0,
    0xfed1b0,
    0x10031b0,
    0x6051c0,
    0xa671c0,
    0xf371c0,
    0x6db1d0,
    0xf5d1d0,
    0xaef1e0,
    0x7691e0,
    0x9251e0,
    0x9391e0,
    0x9a71e0,
    0xead1e0,
    0x7551f0,
    0xb151f0,
    0xbe91f0,
    0xdcb1f0,
    0xe931f0,
    0x567200,
    0x86b210,
    0x9ff210,
    0xc53210,
    0xca5210,
    0xf5f210,
    0x65d220,
    0x6d7220,
    0x7fb220,
    0x7fd220,
    0xe9d220,
    0xf49220,
    0xf51220,
    0xfc7220,
    0x44f230,
    0x7f3230,
    0x909230,
    0xd1b230,
    0x583240,
    0x7a9240,
    0xa91240,
    0xcbd240,
    0x997250,
    0xe3d250,
    0xf11250,
    0x441260,
    0x78d260,
    0xe77260,
    0x655270,
    0xced270,
    0x825280,
    0x8c9280,
    0xa1d280,
    0xbab280,
    0x5c9290,
    0x659290,
    0x75b290,
    0x869290,
    0x99f2a0,
    0xac12a0,
    0xb432a0,
    0xe932a0,
    0xbd52b0,
    0x4432b0,
    0x5a72b0,
    0x72f2b0,
    0xa272b0,
    0xad12b0,
    0xfcb2b0,
    0x68f2c0,
    0xf212c0,
    0x10192c0,
    0x58f2d0,
    0x8652d0,
    0x9b52e0,
    0xae72e0,
    0x5bf2f0,
    0x70b2f0,
    0x9972f0,
    0x771300,
    0xb73310,
    0xc8f310,
    0xe5f310,
    0xa23320,
    0xaeb320,
    0x499330,
    0x801330,
    0xdc8fc0,
    0x73b340,
    0x83d340,
    0x575350,
    0x403360,
    0x785360,
    0x7f5360,
    0xafd360,
    0xe71360,
    0x513370,
    0x6ab370,
    0x725380,
    0x5a3390,
    0x701390,
    0x7cf390,
    0x91d390,
    0x981390,
    0xb43390,
    0xaaf3a0,
    0x9d53a0,
    0xe533a0,
    0x84b3b0,
    0x7413c0,
    0x8a93c0,
    0xb393c0,
    0xe4d3c0,
    0xe9d3c0,
    0x4853d0,
    0x4993d0,
    0x70d3d0,
    0x8813d0,
    0xcd13d0,
    0x82b3e0,
    0xccd3e0,
    0xadf3f0,
    0x43d3f0,
    0x7793f0,
    0x8f33f0,
    0x609400,
    0xc4f400,
    0xd2d400,
    0xa8d410,
    0xb4f410,
    0xa6d410,
    0x513410,
    0x68f410,
    0x6c1410,
    0x7a3410,
    0xaa3410,
    0x995410,
    0x7bf420,
    0xb8f420,
    0xdcf420,
    0x701430,
    0x7e9430,
    0xae7430,
    0x74afc0,
    0x7ad440,
    0x9c7440,
    0xf15440,
    0x769450,
    0xaad450,
    0xd25450,
    0xfaf450,
    0x8a5460,
    0x95b460,
    0x4d3470,
    0xf01470,
    0x1039470,
    0x60f480,
    0xc51480,
    0xd2b480,
    0xe1d480,
    0xb13490,
    0xb15490,
    0xaf7490,
    0x45b490,
    0x60d490,
    0x67b490,
    0xf5d490,
    0x7b34a0,
    0xf374a0,
    0x66f4b0,
    0x6994b0,
    0x8eb4b0,
    0x9e94b0,
    0xe614b0,
    0x4294c0,
    0x54f4c0,
    0x8ab4c0,
    0xa114c0,
    0xc3b4c0,
    0xf574c0,
    0xfc94c0,
    0x94b4d0,
    0x9694d0,
    0xfdb4d0,
    0xf354e0,
    0x4894f0,
    0x591500,
    0x5c5510,
    0x100f510,
    0x1063510,
    0xeaf520,
    0x47d530,
    0x91d530,
    0xc1d530,
    0xc7b530,
    0xd01530,
    0xe15530,
    0x67f540,
    0x76d540,
    0xa8d540,
    0xcf5540,
    0x60f550,
    0x79b550,
    0x923550,
    0xb35560,
    0xcf7560,
    0x93f570,
    0xa51570,
    0x5b7570,
    0x78f570,
    0xf2d570,
    0x5ab580,
    0x87f580,
    0xe1d580,
    0xeb1580,
    0xf35580,
    0xfcd580,
    0x72f590,
    0x8e3590,
    0x7e95a0,
    0x8615a0,
    0xa4d5a0,
    0x65f5b0,
    0x7f55b0,
    0x98f5b0,
    0xc035b0,
    0x7c95c0,
    0x8d15c0,
    0xa135c0,
    0xf515c0,
    0x8b55d0,
    0x8b75d0,
    0xc315d0,
    0xbd75e0,
    0xd7d5e0,
    0xe655e0,
    0xecf5e0,
    0x5db5f0,
    0x4cd5f0,
    0x6595f0,
    0x875600,
    0x101f600,
    0x93f610,
    0xe17610,
    0xffb610,
    0x4d7620,
    0x88b620,
    0xb25620,
    0x1007620,
    0x6e3630,
    0x869630,
    0xa59630,
    0xd9b630,
    0x1051630,
    0x60b640,
    0x809640,
    0xa6d640,
    0x57b650,
    0xa5f650,
    0x707660,
    0x73b660,
    0x8d1670,
    0xa61670,
    0xab5670,
    0xcbb670,
    0x417670,
    0x59b670,
    0x8ed670,
    0xf6b670,
    0xb7d680,
    0xbe1680,
    0xd43680,
    0xa81690,
    0x929690,
    0xa13690,
    0xf1f690,
    0x6b56a0,
    0x8756a0,
    0xf6f6a0,
    0xc576b0,
    0xcb76b0,
    0x5036b0,
    0x5af6b0,
    0x7ef6b0,
    0xb4b6c0,
    0x66d6d0,
    0x6e36d0,
    0xb696d0,
    0xd556d0,
    0x5e96e0,
    0x7d56e0,
    0xd896e0,
    0x9c36f0,
    0xba16f0,
    0xcf56f0,
    0xf416f0,
    0x6b7710,
    0xc41710,
    0xe81710,
    0xa1b720,
    0xc0b720,
    0xe69740,
    0xc57750,
    0x651750,
    0x729750,
    0x91b750,
    0x923750,
    0x82d770,
    0xa4f770,
    0xab3770,
    0xb0d770,
    0x1013770,
    0x1059770,
    0xcdf780,
    0x40f780,
    0x441780,
    0x45b780,
    0x783780,
    0x7bf780,
    0x7d5780,
    0x79f790,
    0x965790,
    0x9c3790,
    0xdc3790,
    0xf41790,
    0xf95790,
    0x8a77a0,
    0x9e57a0,
    0xa637a0,
    0xeaf7a0,
    0xb757c0,
    0x7457d0,
    0x76f7d0,
    0xbfd7e0,
    0x6cf7e0,
    0x7757e0,
    0x9af7e0,
    0xa717e0,
    0xb397f0,
    0x4317f0,
    0x4ab7f0,
    0x9237f0,
    0x5eb800,
    0xf2f810,
    0x70b820,
    0x961820,
    0x9e7820,
    0xdfb830,
    0xeed830,
    0x47d840,
    0x8a7840,
    0x9e5840,
    0xa37840,
    0xac9840,
    0xb7d840,
    0x65d850,
    0x8cd850,
    0x5d7860,
    0x7c3860,
    0xa79860,
    0xcbf860,
    0xd15870,
    0x611880,
    0x969880,
    0xa7d880,
    0x1035880,
    0xd23890,
    0xd57890,
    0xeeb890,
    0x4098a0,
    0xc518a0,
    0x10098c0,
    0x100f8d0,
    0x6658e0,
    0xa8d8e0,
    0xabb8e0,
    0xb7d8e0,
    0x4198f0,
    0x4f18f0,
    0x8ff8f0,
    0xac78f0,
    0x523900,
    0x8f7900,
    0xdf9900,
    0x9f5910,
    0xee9910,
    0x7b5920,
    0xf3f920,
    0xf4b920,
    0x4ed930,
    0x51d930,
    0xb4f930,
    0x755940,
    0x779940,
    0x4b3950,
    0xacb960,
    0xb39960,
    0xcb9960,
    0x54b970,
    0x841970,
    0x8eb970,
    0xce3980,
    0x5ab980,
    0x6f1980,
    0x70b980,
    0x419990,
    0x9ad990,
    0xa6f990,
    0xac7990,
    0x58f9a0,
    0x8319a0,
    0xbd99a0,
    0xd579a0,
    0xfad9a0,
    0x7bd9b0,
    0x7e79b0,
    0xb9d9b0,
    0x5b19c0,
    0xc7d9c0,
    0xe4d9c0,
    0xecd9c0,
    0x6cd9d0,
    0xd6d9d0,
    0xea99d0,
    0xa6d9e0,
    0x6479e0,
    0xe319e0,
    0xbef9f0,
    0xa8b9f0,
    0xc939f0,
    0xf699f0,
    0x51fa00,
    0xa1ba00,
    0xa83a10,
    0x5e3a30,
    0x8ada30,
    0xb4ba30,
    0x65da40,
    0x48ba50,
    0x4afa50,
    0x5d9a50,
    0x5fba50,
    0x685a50,
    0x739a50,
    0x59fa60,
    0xc11a60,
    0x421a70,
    0x6cda70,
    0xd9ba70,
    0x4dba80,
    0x80fa80,
    0x99da90,
    0xd67a90,
    0xfd5a90,
    0x779aa0,
    0x80baa0,
    0xa57aa0,
    0xed5aa0,
    0x7dbab0,
    0x857ab0,
    0xca1ab0,
    0x7bbac0,
    0x999ac0,
    0xa05ac0,
    0xe1bac0,
    0xec3ac0,
    0x5a5ad0,
    0xc35ad0,
    0xe21ad0,
    0x825ae0,
    0x9fbae0,
    0xe11ae0,
    0xf27ae0,
    0xc77af0,
    0x46faf0,
    0x106daf0,
    0x50fb00,
    0x6edb00,
    0x82fb00,
    0xaf3b00,
    0xb39b00,
    0xc7bb00,
    0xcdfb00,
    0xdcdb00,
    0xe7db00,
    0xeb1b00,
    0x6d5b10,
    0x8c1b10,
    0xb67b10,
    0xc47b10,
    0xd69b10,
    0xe71b10,
    0xf76660,
    0x103db10,
    0x6b1b20,
    0xb1fb20,
    0xb9fb20,
    0x501b30,
    0x5f1b30,
    0xdb7b30,
    0xd18fc0,
    0xd7db40,
    0x4e1b50,
    0x6dfb50,
    0x7c5b50,
    0x839b50,
    0x509b60,
    0xa03b60,
    0x841b70,
    0x941b80,
    0xb73b80,
    0xca9b90,
    0xcd1b90,
    0xf61b90,
    0x4a9ba0,
    0x85dba0,
    0xa63ba0,
    0xad5ba0,
    0xf93ba0,
    0x8e9bb0,
    0xa05bb0,
    0xc47bb0,
    0x1009bb0,
    0x60bbc0,
    0xf17bc0,
    0xe09bd0,
    0x102bbd0,
    0x8ebbe0,
    0xb01be0,
    0xcd3be0,
    0x60dbf0,
    0x1019bf0,
    0x821c00,
    0xb95c00,
    0xf11c00,
    0xc8dc10,
    0x741c10,
    0x885c10,
    0x102dc10,
    0x45bc20,
    0xccfc20,
    0xca9c30,
    0x5efc30,
    0x5fbc30,
    0x95bc30,
    0xbb3c30,
    0x4adc40,
    0x64dc40,
    0x9bdc40,
    0xac1c40,
    0x617c50,
    0xe69c50,
    0x435c60,
    0x591c60,
    0x855c60,
    0x929c60,
    0xa79c60,
    0xfa7c60,
    0x6f5c70,
    0x8bdc70,
    0xb01c80,
    0xdfdc80,
    0x701c90,
    0x7e9c90,
    0xac9c90,
    0x4dbca0,
    0xca1ca0,
    0xca3ca0,
    0xf27ca0,
    0x5f3cb0,
    0x6dfcb0,
    0x707cb0,
    0x885cb0,
    0xe51cb0,
    0x67bcc0,
    0xaf7cc0,
    0xccfcc0,
    0xd11cc0,
    0xbb9cd0,
    0x65bce0,
    0x7f3ce0,
    0x931ce0,
    0xcc9ce0,
    0xcf1ce0,
    0xe43ce0,
    0x40bcf0,
    0x6a7cf0,
    0x941cf0,
    0xb51cf0,
    0xbabcf0,
    0xd3dcf0,
    0xeb1cf0,
    0x465d00,
    0xb19d00,
    0x4cfd10,
    0x7f1d10,
    0x84bd10,
    0xed7d10,
    0xf05d10,
    0x575d20,
    0x60bd20,
    0x917d20,
    0x98dd20,
    0xac9d30,
    0xf71d30,
    0xe1cfc0,
    0x617d50,
    0x635d50,
    0x8cdd50,
    0xf7dd50,
    0x79fd60,
    0xa07d60,
    0xca5d60,
    0xd43d60,
    0xe8dd60,
    0xf0bd60,
    0xa4bd70,
    0xa83d70,
    0x66fd70,
    0x6b1d70,
    0x865d70,
    0x1043d70,
    0xcd9d80,
    0x507d80,
    0x533d80,
    0x6ffd80,
    0x741d80,
    0xcc9d80,
    0x8add90,
    0x57bda0,
    0x907db0,
    0xb07db0,
    0xca1db0,
    0xdc7db0,
    0xed7db0,
    0xf79db0,
    0x6b7dc0,
    0x76fdc0,
    0x9f5dd0,
    0x1045dd0,
    0xc41de0,
    0xdcbde0,
    0xe51de0,
    0x5fddf0,
    0x499df0,
    0x6d5df0,
    0x6dbdf0,
    0xca5e00,
    0xf6de00,
    0x555e10,
    0x821e10,
    0xa99e10,
    0xcdde10,
    0xfc3e10,
    0x99fe20,
    0xabde20,
    0xe4be20,
    0x4ede30,
    0x93de30,
    0x9f1e30,
    0xd21e30,
    0xe15e30,
    0xe8be30,
    0xebbe30,
    0xaf7e40,
    0xa9fe40,
    0xb8fe40,
    0xee1e40,
    0xfc9e40,
    0x775e50,
    0x907e60,
    0xcebe60,
    0xadfe60,
    0xd99e60,
    0xab3e70,
    0x61be80,
    0x761e80,
    0xdcbe80,
    0xa91e90,
    0x773e90,
    0x943e90,
    0x103be90,
    0x83bea0,
    0xf13ea0,
    0xb8deb0,
    0xb93eb0,
    0x6edeb0,
    0x8f7eb0,
    0xf3beb0,
    0x5d9ec0,
    0x6bbec0,
    0x813ec0,
    0x9cfec0,
    0xf9fec0,
    0xa8bed0,
    0xb37ed0,
    0xf61ed0,
    0x607ee0,
    0xac9ef0,
    0xdffef0,
    0xbe7f00,
    0x439f10,
    0x49ff10,
    0x761f20,
    0x9a7f20,
    0xa5df20,
    0xc7bf20,
    0xdcbf20,
    0x57bf30,
    0x825f30,
    0x99ff30,
    0x9a9f30,
    0xccff30,
    0xdaff30,
    0xe4bf30,
    0xf73f30,
    0x937f40,
    0x105ff40,
    0x4c7f50,
    0x59df50,
    0x5fdf50,
    0x7a7f50,
    0x9b5f50,
    0xbf5f50,
    0xd3ff50,
    0xe37f50,
    0xf2bf50,
    0x6bbf60,
    0x721f60,
    0x84bf60,
    0x945f60,
    0xd31f60,
    0xd5ff60,
    0xf8ff60,
    0xcc5f70,
    0x543f70,
    0x8bbf80,
    0x57df80,
    0x8b5f80,
    0xa97f90,
    0xa69f90,
    0x48bf90,
    0x79df90,
    0x805f90,
    0x913f90,
    0xd6bf90,
    0xa93fc0,
    0xc57fc0,
    0x85dfc0,
    0xca3fc0,
    0x629fc0,
    0x49ffc0,
    0x767fc0,
    0x769fc0,
    0x7dbfc0,
    0xe6dfc0,
    0x40bfd0,
    0x6c1fd0,
    0x831fd0,
    0xbc7fd0,
    0x8abfe0,
    0xd77fe0,
    0xb1dff0,
    0x573ff0,
    0x931ff0,
])
    
UClass__UClass = 0x0043D8C0

InClassConstructor_ealist = []

# simple helpers for manipulating type info
def get_typeinf(typestr):
    tif = idaapi.tinfo_t()
    tif.get_named_type(idaapi.get_idati(), typestr)
    return tif

def get_typeinf_ptr(tif):
    assert(tif is not None)
    typeinf_ptr = idaapi.tinfo_t()
    typeinf_ptr.create_ptr(tif)
    return typeinf_ptr

def update_func_this(func_ea, this_type=None):
    functype = None
    try:
        func_details = get_func_details(func_ea)
        if func_details is None:
            return None

        if this_type:
            if len(func_details) > 0:
                func_details[0].name = "this"
                func_details[0].type = this_type

        functype = update_func_details(func_ea, func_details)
    except ida_hexrays.DecompilationFailure as e:
        logging.exception("Couldn't decompile 0x%x", func_ea)
    
    return functype

def get_func_details(func_ea):
    xfunc = ida_hexrays.decompile(func_ea)
    if xfunc is None:
        return None
    func_details = idaapi.func_type_data_t()
    xfunc.type.get_func_details(func_details)
    return func_details

def update_func_details(func_ea, func_details):
    function_tinfo = idaapi.tinfo_t()
    function_tinfo.create_func(func_details)
    if not ida_typeinf.apply_tinfo(func_ea, function_tinfo, idaapi.TINFO_DEFINITE):
        return None
    return function_tinfo

def add_data_xref(from_ea, to_ea):
    # Add simple xref from `from_ea` address to data at `to_ea` address
    idaapi.add_dref(from_ea, to_ea, idaapi.XREF_USER | dr_O)


def add_code_xref(from_ea, to_ea):
    # Add simple xref from `from_ea` address to code at `to_ea` address
    idaapi.add_cref(from_ea, to_ea, idaapi.XREF_USER | fl_CF)

# used to avoid processing any duplicate UClass::UClass calls
processed_UClassNames = set()

class UClassInfoExtractor(idaapi.ctree_visitor_t):
    def __init__(self):
        idaapi.ctree_visitor_t.__init__(self, idaapi.CV_FAST)
    
    def visit_expr(self, expr):
        # look for call expressions...
        if expr.op == idaapi.cot_call:
            # that call 'mb_UClass:UClass'
            if expr.x.op == idaapi.cot_obj and expr.x.obj_ea == UClass__UClass:
                # function signature of 'UClass::UClass'
                """
                    _DWORD *__thiscall mb_UClass::UClass(
                        _DWORD *this, // arg 0
                        int __formal, // arg 1
                        int InSize, // arg 2
                        int InClassFlags, // arg 3
                        int InClassCastFlags, // arg 4
                        WCHAR *InNameStr, // arg 5
                        WCHAR *InPackageName, // arg 6
                        WCHAR *InConfigName, // arg 7
                        int InFlags, // arg 8
                        int InFlagsHigh, // arg 9
                        int InClassConstructor, // arg 10
                        int InClassStaticConstructor, // arg 11
                        int InClassStaticInitializer, // arg 12
                    )
                """
                # extract out and record call args
                InSize = expr.a[2].numval()
                assert(InSize % 4 == 0)
                InNameStr_ea = expr.a[5].ea

                InNameStr_addr_ea = idc.get_operand_value(InNameStr_ea, 0)
                # InNameStr is technically not the actual identifier for a UClass, it chops off the starting wchar
                #  e.g. UObject -> Object, UFunction -> Function (and etc)
                # .. so InNameStr's addr is tweaked to account for that
                # HOWEVER:
                #  in classic Unreal Engine 3 fashion - this isn't true for all names.. 
                #  there's a small subset (~20 or so) names that don't have the starting char chopped
                #  in those cases, don't do anything 
                if(InNameStr_addr_ea % 4 == 2):
                    InNameStr_addr_ea -= 2
                    InNameStr_value = idc.get_strlit_contents(InNameStr_addr_ea, -1, idc.STRTYPE_C_16).decode("utf-8")
                    print(f"{InNameStr_value}, (size={InSize:x})")
                else:
                    InNameStr_value = idc.get_strlit_contents(InNameStr_addr_ea, -1, idc.STRTYPE_C_16).decode("utf-8")
                    print(f"<ALIGNED?> {InNameStr_value}, (size={InSize:x})")

                if InNameStr_value not in processed_UClassNames:
                    # begin construction of class type (if not already done so)
                    sid = idc.get_struc_id(InNameStr_value)
                    if sid == idc.BADADDR:
                        sid = idc.add_struc(idc.BADADDR, InNameStr_value, 0)
                        idc.add_struc_member(sid, "__vtable", 0x0, idc.FF_DWORD, idc.BADADDR, 4)
                        idc.add_struc_member(sid, f"final_{InSize:x}", InSize - 1, idc.FF_BYTE, idc.BADADDR, 1)

                    InClassConstructor_ea = idc.get_operand_value(expr.a[10].ea, 0)
                    assert(idc.get_func_name(InClassConstructor_ea).startswith("nullsub") is False)
                    idc.set_name(InClassConstructor_ea, f"{InNameStr_value}::InClassConstructor")

                    # can safely assume and update InClassConstructors 'this' value
                    uclass_tif = get_typeinf(InNameStr_value)
                    if uclass_tif is None:
                        raise AnalysisError(f"(ERROR) could not find tif for '{InNameStr_value}'")

                    # type as '*this'
                    this_type = get_typeinf_ptr(uclass_tif)
                    update_func_this(InClassConstructor_ea, this_type)

                    InClassStaticConstructor_ea = idc.get_operand_value(expr.a[11].ea, 0)
                    if idc.get_func_name(InClassStaticConstructor_ea).startswith("nullsub") is False:
                        idc.set_name(InClassStaticConstructor_ea, f"{InNameStr_value}::InClassStaticConstructor")

                    InClassStaticInitializer_ea = idc.get_operand_value(expr.a[12].ea, 0)
                    if idc.get_func_name(InClassStaticInitializer_ea).startswith("nullsub") is False:
                        idc.set_name(InClassStaticInitializer_ea, f"{InNameStr_value}::InClassStaticInitializer")

                    # keep track of the native class constructor for this UClass
                    #  so we can identify the vtable it uses
                    global InClassConstructor_ealist
                    InClassConstructor_ealist.append([InNameStr_value, InClassConstructor_ea])
                    processed_UClassNames.add(InNameStr_value)

        return 0

class AnalysisError(RuntimeError):
    pass

class UClassVTableInfoExtractor(idaapi.ctree_visitor_t):
    def __init__(self, depth=0):
        self.depth = depth
        self.vtable_writes = []
        idaapi.ctree_visitor_t.__init__(self, idaapi.CV_FAST)
    
    def visit_expr(self, expr):
        # cot_call: x(...)
        if expr.op == idaapi.cot_call:
            # identify any 'super' calls
            if len(expr.a) == 1:
                mb_call_var = expr.a[0]
                if mb_call_var.op == idaapi.cot_cast: 
                    mb_call_var = mb_call_var.x

                if mb_call_var.op == idaapi.cot_var:
                    var = mb_call_var.get_v().getv()
                    if var.name == "this":
                        idc.SetType(expr.x.obj_ea, "UObject *__thiscall x(UObject *this)")
                        cfunc = ida_hexrays.decompile(expr.x.obj_ea)
                        print("<decompile>")
                        if cfunc is None:
                            raise AnalysisError("failed to decompile super call")
                            
                        # prepend 'super' vtable writes.. to keep them in right order
                        se = UClassVTableInfoExtractor(self.depth + 1)
                        se.apply_to(cfunc.body, None)
                        print("applied")
                        self.vtable_writes = [*se.vtable_writes, *self.vtable_writes]

        # cot_asg: x = y
        if expr.op == idaapi.cot_asg:
            rval = expr.y
            # cot_cast: (type)x
            if rval.op == idaapi.cot_cast:
                rval = rval.x

            if expr.x.op == idaapi.cot_memptr:
                mem_expr = expr.x
                # cot_memptr: x->m, access size in 'ptrsize'
                lvar = mem_expr.x.get_v()
                if lvar is not None and lvar.getv().name == "this" and mem_expr.m == 0x0:
                    if rval.op != idaapi.cot_obj:
                        print(f"rval op mistmatch, got {rval.opname}")
                        # can't be writing a vtable, must be cot_obj
                    else:
                        vtable_ea = rval.obj_ea
                        self.vtable_writes.append([expr.ea, vtable_ea])
                        print(f"<vtable write>: {expr.ea:x}-{vtable_ea:x}")

        return 0

def run():
    for func_ea in [b for b in constructor_func_ea_set]:
        try: 
            cfunc = ida_hexrays.decompile(func_ea)
        except ida_hexrays.DecompilationFailure:
            print("Failed to decompile!")
            continue

        print(f"scan func {func_ea:x}")
        se = UClassInfoExtractor()
        se.apply_to(cfunc.body, None)

    identified_vtables = []

    # now identify vtables for 'native' UClass objects
    for [uclass_name, cons_ea] in InClassConstructor_ealist:
        try: 
            cfunc = ida_hexrays.decompile(cons_ea)
            if cfunc is None:
                print("Failed to decompile!")
                continue
        except ida_hexrays.DecompilationFailure:
            print("Failed to decompile!")
            continue

        print(f"cons: {cons_ea:x}")
        se = UClassVTableInfoExtractor()
        se.apply_to(cfunc.body, None)

        # pick 'last' vtable write to identify as vtable for given UClass
        if len(se.vtable_writes) == 0:
            continue
        
        [expr_ea, vtable_ea] = se.vtable_writes[-1]
        print(f"last (out of {len(se.vtable_writes)}: {uclass_name}:{expr_ea:x}:{vtable_ea:x}")

        sid = idc.get_struc_id(uclass_name)
        assert(sid != idc.BADADDR)
        uclass_vtable_id = idc.get_member_id(sid, 0x0)
        add_data_xref(vtable_ea, uclass_vtable_id)
        idc.set_name(vtable_ea, f"{uclass_name}__vft")

run()